/*!
  EhUI
  Copyright (c) Ehan Ahamed and contributors
  Licensed under the UPL-1.0 License
  https://ehui.ehan.dev/LICENSE.txt
*/
html {
  height: auto;
  font-size: 18px;
  scroll-behavior: smooth;
}

@media only screen and (max-width: 800px) {
  html {
    font-size: 16px;
  }
}
body {
  height: auto;
  background-color: var(--bg1);
  color: var(--fg);
  font-size: 1rem;
  line-height: 1.4;
  font-family: sans-serif;
  font-weight: normal;
  margin: 0px;
}

::selection {
  background-color: var(--primaryAlt);
  color: var(--bg1);
}

h1,
.h1 {
  font-size: 3.4rem;
  font-weight: bold;
  margin-bottom: 1rem;
  margin-top: 0px;
}

h2,
.h2 {
  font-size: 2.8rem;
  font-weight: bold;
  margin-bottom: 1rem;
  margin-top: 0px;
}

h3,
.h3 {
  font-size: 2.2rem;
  font-weight: bold;
  margin-bottom: 1rem;
  margin-top: 0px;
}

h4,
.h4 {
  font-size: 1.6rem;
  font-weight: bold;
  margin-bottom: 1rem;
  margin-top: 0px;
}

h1, h2, h3, h4,
.h1, .h2, .h3, .h4 {
  line-height: 1.2;
}

h5,
.h5,
p {
  font-size: 1rem;
  font-weight: normal;
  margin-top: 0px;
  margin-bottom: 1rem;
}

/* TEMPORARY FIX */
p {
  margin-block-end: 0px;
}

h6,
.h6,
small {
  font-size: 0.8rem;
  font-weight: normal;
  margin-bottom: 1rem;
}

h5, p, h6, small,
.h5, .h6 {
  line-height: 1.4;
}

b,
.b {
  font-weight: bold;
}

i,
.i {
  font-style: italic;
}

/*
nerdfont icons shouldn't have same styling as italic element lol
*/
i.nf {
  font-style: normal;
}

s,
.s {
  text-decoration: line-through;
}

mark,
.mark {
  background-color: var(--fg);
  color: var(--bg1);
  border-radius: 0.8rem;
  padding: 0.2rem 0.4rem;
  font-size: 1rem;
  line-height: 1.4;
}

code,
.code {
  font-family: monospace;
  background-color: var(--bg2);
  border-radius: 0.8rem;
  padding: 0.2rem 0.4rem;
  font-size: 1rem;
  line-height: 1.4;
}

.box {
  color: var(--fg);
  border: 0.2rem solid var(--bg2);
  border-radius: 0.8rem;
  padding: 1rem;
}

.hero {
  border-bottom: 0.2rem solid var(--bg2);
  text-align: center;
  padding: 1rem;
  padding-bottom: 4rem;
  margin: 4rem 1rem;
}

.topmost {
  /* "topmost" is those alert bar thingies that are ABOVE the header, they're the top-most */
  margin: 1rem;
}

header,
.header {
  position: sticky;
  z-index: 100;
  /* TEMP*/
  height: 4rem;
  top: 0px;
  background-color: var(--bg1);
  border-bottom: 0.2rem solid var(--bg2);
  padding: 0px;
  margin: 0px;
}

header > .nav {
  display: flex;
  gap: 1rem;
  align-items: center;
  margin: 0px 1rem;
}

.nav > div {
  border-bottom: 0.2rem solid var(--bg1);
}

.nav > div.current {
  border-bottom: 0.2rem solid var(--primaryAlt);
}

.nav > div.current > a {
  color: var(--primaryAlt);
}

footer,
.footer {
  border-top: 0.2rem solid var(--bg2);
  text-align: center;
  padding: 1rem;
  padding-top: 4rem;
  margin: 4rem 1rem;
}

table {
  border-collapse: separate;
  border-spacing: 0px;
  border-radius: 0.8rem;
  border: 0.2rem solid var(--bg2);
}

td {
  font-weight: normal;
  text-align: left;
  padding: 1rem;
}

th {
  font-weight: bold;
  text-align: left;
  padding: 1rem;
}

table.outer td,
table.outer th,
table.outer thead,
table.outer tbody,
table.outer tfoot {
  border: none;
}

table.inner th:not(:last-child),
table.inner td:not(:last-child) {
  border-right: 0.2rem solid var(--bg2);
}

table.inner > thead > tr > th,
table.inner > thead > tr > td,
table.inner > tbody > tr:not(:last-child) > th,
table.inner > tbody > tr:not(:last-child) > td,
table.inner > tr:not(:last-child) > td,
table.inner > tr:not(:last-child) > th,
table.inner > thead:not(:last-child),
table.inner > tbody:not(:last-child) {
  border-bottom: 0.2rem solid var(--bg2);
}

a,
.a {
  color: var(--primary);
  cursor: pointer;
  border-radius: 0.8rem;
  font-size: 1rem;
  line-height: 1.4;
  text-decoration: none;
  transition-duration: 0.4s;
}

a:hover,
a:focus-visible,
.a:hover,
.a:focus-visible {
  color: var(--primaryAlt);
}

a:focus-visible,
.a:focus-visible {
  outline: 0.2rem solid var(--primary);
  outline-offset: 0.4rem;
  transition-duration: 0.1s;
}

button,
.button {
  display: inline-block;
  appearance: none;
  align-items: flex-start;
  box-sizing: border-box;
  text-align: center;
  cursor: pointer;
  text-decoration: none;
  background-color: var(--primary);
  color: var(--bg1);
  border: 0.2rem solid var(--primary);
  border-radius: var(--button-radius);
  padding: 0.4rem 0.8rem;
  font-size: 1rem;
  line-height: 1.4;
  transition-duration: 0.4s;
}

button.alt,
.button.alt {
  background-color: var(--bg1);
  color: var(--primary);
}

button:hover,
button:focus-visible,
.button:hover,
.button:focus-visible {
  background-color: var(--primaryAlt);
  color: var(--bg1);
}

button:focus-visible,
.button:focus-visible {
  outline: 0.2rem solid var(--primary);
  outline-offset: 0.2rem;
  transition-duration: 0.1s;
}

::placeholder {
  color: var(--bg3);
  font-size: 1rem;
  font-family: sans-serif;
  font-weight: normal;
  opacity: 1;
}

input[type=text],
input[type=password],
textarea {
  display: inline-block;
  appearance: none;
  align-items: flex-start;
  box-sizing: border-box;
  text-align: left;
  cursor: text;
  text-decoration: none;
  font-family: sans-serif;
  background-color: var(--bg1);
  color: var(--fg);
  border: 0.2rem solid var(--primary);
  border-radius: 0.8rem;
  padding: 0.4rem 0.8rem;
  font-size: 1rem;
  line-height: 1.4;
  transition-duration: 0.4s;
}

input[type=text]:hover,
input[type=text]:focus-visible,
input[type=password]:hover,
input[type=password]:focus-visible,
textarea:hover,
textarea:focus-visible {
  border-color: var(--primaryAlt);
}

input[type=text]:focus-visible,
input[type=password]:focus-visible,
textarea:focus-visible {
  outline: 0.2rem solid var(--primary);
  outline-offset: 0.2rem;
  transition-duration: 0.1s;
}

/*
the html of a radio should look like:

<div class="radio>
  <input type="radio" id="id" ... />
  <label for="id">text</label>
</div>
*/
.radio,
.checkbox {
  display: grid;
  grid-template-columns: 1.8rem auto 1fr;
  grid-template-areas: "input label .";
  gap: 1em;
}

.radio input,
.checkbox input {
  grid-area: input;
}

.radio label,
.checkbox label {
  grid-area: label;
}

input[type=radio],
input[type=checkbox] {
  /*
  https://moderncss.dev/pure-css-custom-styled-radio-buttons/
  https://moderncss.dev/pure-css-custom-checkbox-style/
  */
  appearance: none;
  width: 1.8rem;
  height: 1.8rem;
  margin: 0px;
  background-color: var(--bg1);
  border: 0.2rem solid var(--primary);
  transition-duration: 0.4s;
}

input[type=radio] {
  border-radius: 50%;
}

input[type=checkbox] {
  border-radius: 0.6rem;
}

input[type=radio]:hover,
input[type=radio]:focus-visible,
input[type=checkbox]:hover,
input[type=checkbox]:focus-visible {
  border-color: var(--primaryAlt);
}

input[type=radio]:focus-visible,
input[type=checkbox]:focus-visible {
  outline: 0.2rem solid var(--primary);
  outline-offset: 0.2rem;
  transition-duration: 0.1s;
}

input[type=radio]:checked,
input[type=checkbox]:checked {
  background-color: var(--primary);
  transition-duration: 0.1s;
}

.card {
  width: 40rem;
  height: 20rem;
}

.caption {
  width: 40rem;
  display: grid;
  gap: 1rem;
  grid-template-rows: 1fr;
}

.caption.centerThree {
  grid-template-columns: 1fr 4fr 1fr;
}

.caption.evenTwo {
  grid-template-columns: 1fr 1fr;
}

.caption.evenThree {
  grid-template-columns: 1fr 1fr 1fr;
}

@media only screen and (max-width: 800px) {
  .card,
  .caption {
    width: 100%;
  }
}
.card > .content {
  display: flex;
  position: relative;
  width: 100%;
  height: 100%;
  background-color: var(--bg2);
  border-radius: 0.8rem;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.card.double {
  perspective: 1000px;
}

.card.double > .content {
  display: block;
  transition: transform 0.4s;
  transform-style: preserve-3d;
  background-color: inherit;
  border-radius: 0px;
  align-items: normal;
  justify-content: normal;
  text-align: center;
}

.card.double > .content > .front,
.card.double > .content > .back {
  display: flex;
  position: absolute;
  width: 100%;
  height: 100%;
  margin-top: 0px;
  background-color: var(--bg2);
  border-radius: 0.8rem;
  align-items: center;
  justify-content: center;
  text-align: center;
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  transform: rotateX(0deg);
}

.card.double > .content > .back {
  transform: rotateY(180deg);
}

.card.double.flip > .content {
  transform: rotateY(180deg);
}

.separator {
  display: flex;
  justify-content: center;
  align-items: center;
  color: var(--bg3);
}

.separator::before,
.separator::after {
  content: "";
  display: block;
  background: var(--bg2);
  width: 100%;
  height: 0.2rem;
  margin: 0px 1rem;
}

.modal {
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 200;
  position: fixed;
  top: 0px;
  left: 0px;
  width: 100vw;
  height: 100vh;
}

.modal::before {
  content: "";
  position: fixed;
  z-index: 180;
  top: 0px;
  left: 0px;
  width: 100vw;
  height: 100vh;
  background-color: var(--bg1);
  opacity: 0.6;
}

.modal > .content {
  z-index: 200;
  width: 60vw;
  background-color: var(--bg1);
  border: 0.2rem solid var(--bg2);
  border-radius: 0.8rem;
  padding: 1rem;
}

@media only screen and (max-width: 800px) {
  .modal {
    align-items: flex-end;
  }
  .modal > .content {
    width: 100vw;
    border: none;
    border-top: 0.2rem solid var(--bg2);
    border-radius: 0px;
    padding-bottom: 8rem;
  }
}
.flex.pop {
  padding: 0px 1rem;
}

/*!
  EhUI
  Copyright (c) Ehan Ahamed and contributors
  Licensed under the UPL-1.0 License
  https://ehui.ehan.dev/LICENSE.txt
*/
*,
*:before,
*:after {
  box-sizing: border-box;
}

.center {
  text-align: center;
}

.flex {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.flex.row {
  flex-direction: row;
}

.flex.row.rev {
  flex-direction: row-reverse;
}

.flex.col {
  flex-direction: column;
}

.flex.col.rev {
  flex-direction: column-reverse;
}

.flex.nowrap {
  flex-wrap: nowrap;
}

.flex.wrap {
  flex-wrap: wrap;
}

.flex.start {
  justify-content: flex-start;
}

.flex.end {
  justify-content: flex-end;
}

.flex.center {
  justify-content: center;
}

.flex.spaceBetween {
  justify-content: space-between;
}

.flex.alignStart {
  align-items: flex-start;
  align-content: flex-start;
}

.flex.alignEnd {
  align-items: flex-end;
  align-content: flex-end;
}

.flex.alignCenter {
  align-items: center;
  align-content: center;
}

.flex.stretch {
  align-items: stretch;
  align-content: stretch;
}

.flex.alignSpaceBetween {
  align-items: space-between;
  align-content: space-between;
}

.flex.alignSpaceAround {
  align-items: space-around;
  align-content: space-around;
}

.justifyselfstretch {
  justify-self: stretch;
}

.justifyselfcenter {
  justify-self: center;
}

.justifyselfstart {
  justify-self: start;
}

.justifyselfend {
  justify-self: end;
}

.grid {
  display: grid;
}

.grid.split {
  gap: 0px;
  grid-template-columns: 4fr 4fr;
  grid-template-rows: 1fr;
  grid-template-areas: "left right";
}

.grid.split > .left {
  grid-area: left;
  justify-self: right;
  padding-right: 2rem;
}

.grid.split > .right {
  grid-area: right;
  justify-self: left;
  padding-left: 2rem;
  border-left: 0.2rem solid var(--bg2);
}

.grid.split.noBorder > .left,
.grid.split.noBorder > .right {
  border: none;
}

/* when mobile/smaller-window, resize */
@media only screen and (max-width: 800px) {
  .grid.split {
    grid-template-rows: auto auto;
    grid-template-columns: 1fr;
    grid-template-areas: "left" "right";
    padding: 0px 2rem;
  }
  .grid.split > .left,
  .grid.split > .right {
    justify-self: left;
    padding-left: 0px;
    padding-right: 0px;
    border: none;
  }
}
.grid.list {
  grid-template-columns: 1fr 1fr 1fr;
  gap: 1rem;
  margin-bottom: 2rem; /* temporary fix */
}

/*
when inside a grid split (the list will have less space),
and 
when on mobile/smaller-window,
make the list have only one column
*/
.grid.split .grid.list {
  /* for grid split */
  grid-template-columns: 1fr;
}

@media only screen and (max-width: 800px) {
  .grid.list {
    /* for mobile/smaller-window */
    grid-template-columns: 1fr;
  }
}
.grid.hero {
  grid-template-columns: 6fr 2fr 6fr;
  grid-template-rows: 1fr;
  grid-template-areas: "content . logo";
}

.grid.hero > .content {
  grid-area: content;
  justify-self: end;
  align-self: center;
  text-align: center;
}

.grid.hero > .logo {
  grid-area: logo;
  justify-self: start;
  align-self: center;
}

@media only screen and (max-width: 800px) {
  .grid.hero {
    grid-template-columns: 1fr;
    grid-template-rows: 1fr 1fr;
    grid-template-areas: "logo" "content";
  }
  .grid.hero > .content,
  .grid.hero > .logo {
    justify-self: center;
  }
}
.grid.intro {
  grid-template-rows: auto auto;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  grid-template-areas: "logotype actions" "content content";
  padding-top: 1rem;
  padding-left: 2rem;
  padding-right: 2rem;
  padding-bottom: 4rem;
  margin-top: 0px;
  margin-left: 1rem;
  margin-right: 1rem;
  margin-bottom: 4rem;
  border-bottom: 0.2rem solid var(--bg2);
}

.grid.intro > .logotype {
  grid-area: logotype;
  display: flex;
  gap: 1rem;
  justify-items: start;
  justify-content: start;
  align-items: center;
}

.grid.intro > .logotype p {
  margin-bottom: 0px;
}

.grid.intro > .logotype > .logo {
  width: 4rem;
  height: 4rem;
}

.grid.intro > .content {
  grid-area: content;
  text-align: center;
}

@media only screen and (max-width: 800px) {
  .grid.intro {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}
.grid.page {
  grid-template-columns: 2fr 10fr 2fr;
  grid-template-rows: 1fr;
  grid-template-areas: ". content .";
}

.grid.page > .content {
  grid-area: content;
  justify-self: stretch;
  align-self: start;
}

@media only screen and (max-width: 800px) {
  .grid.page {
    grid-template-columns: 1fr 12fr 1fr;
  }
}
.grid.screen {
  height: 100%;
  margin: 0px 1rem;
}

.grid.screen > .content {
  justify-self: center;
  align-self: center;
  margin-top: 0px;
}

html.screen {
  height: 100%;
}

html.screen body {
  height: 100%;
  display: grid;
  grid-template-rows: auto 1fr;
}

header {
  display: grid;
  gap: 1rem;
  grid-template-columns: 1fr;
  grid-template-areas: "menu";
}

header > .menu {
  grid-area: menu;
  text-align: left;
  justify-self: left;
}

header > .options {
  grid-area: options;
  text-align: right;
  justify-self: right;
  padding: 1rem;
}

.nav > div {
  height: 100%;
  display: flex;
  align-items: center;
}

/*

* + *        for default,
* + element  for reversing margin-top: 0px;

*/
* + *,
* + p,
* + h1,
* + h2,
* + h3,
* + h4,
* + h5,
* + h6 {
  margin-top: 1rem;
}

.flex > *,
.grid > *,
header > *,
.radio > *,
.checkbox > *,
.caption > *,
.caption > div > *,
.nav > div,
.logotype > * {
  margin-top: 0px;
}

.grid.paragraph {
  gap: 1rem;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: "content image";
}

.grid.paragraph.alt {
  grid-template-areas: "image content";
}

.grid.paragraph > .content {
  grid-area: content;
}

.grid.paragraph > .image {
  grid-area: image;
  display: flex;
  justify-items: center;
  align-items: center;
}

@media only screen and (max-width: 1000px) {
  .grid.paragraph,
  .grid.paragraph.alt {
    gap: 1rem;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr auto;
    grid-template-areas: "content" "image";
  }
}
/*!
  EhUI
  Copyright (c) Ehan Ahamed and contributors
  Licensed under the UPL-1.0 License
  https://ehui.ehan.dev/LICENSE.txt
*/
/*
min/reduced-motion utils
*/
html.min {
  scroll-behavior: auto;
}

html.min a,
html.min .a,
html.min button,
html.min .button,
html.min input[type=text],
html.min input[type=password],
html.min textarea,
html.min input[type=radio],
html.min input[type=checkbox] {
  transition-duration: 0s;
}

html.min .card.min,
.card.double.min {
  perspective: none;
}

html.min .card.double > .content,
.card.double.min > .content {
  display: block;
  transition-duration: 0s;
  transform-style: flat;
  background-color: inherit;
  border-radius: 0px;
  align-items: normal;
  justify-content: normal;
  text-align: center;
}

html.min .card.double > .content > .front,
html.min .card.double > .content > .back,
.card.double.min > .content > .front,
.card.double.min > .content > .back {
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: var(--bg2);
  border-radius: 0.8rem;
  align-items: center;
  justify-content: center;
  text-align: center;
  backface-visibility: visible;
  -webkit-backface-visibility: visible;
  -moz-backface-visibility: visible;
  transform: none;
}

html.min .card.double > .content > .back,
.card.double.min > .content > .back {
  display: none;
  transform: none;
}

html.min .card.double > .content > .front,
.card.double.min > .content > .front {
  display: flex;
}

html.min .card.double.flip > .content,
.card.double.min.flip > .content {
  transform: none;
}

html.min .card.double.flip > .content > .back,
.card.double.min.flip > .content > .back {
  display: flex;
}

html.min .card.double.flip > .content > .front,
.card.double.min.flip > .content > .front {
  display: none;
}

/*
specific css-negation-stuff utils
*/
a.mark {
  color: var(--primary);
}

a.mark:hover,
a.mark:focus-visible {
  color: var(--primaryAlt);
}

/*
other utils
*/
span.red,
p.red,
b.red,
i.red,
u.red,
.text.red,
mark.red,
.mark.red,
code.red {
  color: var(--red);
}

span.redAlt,
p.redAlt,
b.redAlt,
i.redAlt,
u.redAlt,
.text.redAlt,
mark.redAlt,
.mark.redAlt,
code.redAlt {
  color: var(--redAlt);
}

span.orange,
p.orange,
b.orange,
i.orange,
u.orange,
.text.orange,
mark.orange,
.mark.orange,
code.orange {
  color: var(--orange);
}

span.orangeAlt,
p.orangeAlt,
b.orangeAlt,
i.orangeAlt,
u.orangeAlt,
.text.orangeAlt,
mark.orangeAlt,
.mark.orangeAlt,
code.orangeAlt {
  color: var(--orangeAlt);
}

span.yellow,
p.yellow,
b.yellow,
i.yellow,
u.yellow,
.text.yellow,
mark.yellow,
.mark.yellow,
code.yellow {
  color: var(--yellow);
}

span.yellowAlt,
p.yellowAlt,
b.yellowAlt,
i.yellowAlt,
u.yellowAlt,
.text.yellowAlt,
mark.yellowAlt,
.mark.yellowAlt,
code.yellowAlt {
  color: var(--yellowAlt);
}

span.green,
p.green,
b.green,
i.green,
u.green,
.text.green,
mark.green,
.mark.green,
code.green {
  color: var(--green);
}

span.greenAlt,
p.greenAlt,
b.greenAlt,
i.greenAlt,
u.greenAlt,
.text.greenAlt,
mark.greenAlt,
.mark.greenAlt,
code.greenAlt {
  color: var(--greenAlt);
}

span.blue,
p.blue,
b.blue,
i.blue,
u.blue,
.text.blue,
mark.blue .mark.blue,
code.blue {
  color: var(--blue);
}

span.blueAlt,
p.blueAlt,
b.blueAlt,
i.blueAlt,
u.blueAlt,
.text.blueAlt,
mark.blueAlt,
.mark.blueAlt code.blueAlt {
  color: var(--blueAlt);
}

span.bg3,
p.bg3,
b.bg3,
i.bg3,
u.bg3,
.text.bg3,
mark.bg3,
.mark.bg3,
code.bg3 {
  color: var(--bg3);
}

span.bg2,
p.bg2,
b.bg2,
i.bg2,
u.bg2,
.text.bg2,
mark.bg2,
.mark.bg2,
code.bg2 {
  color: var(--bg2);
}

span.bg1,
p.bg1,
b.bg1,
i.bg1,
u.bg1,
.text.bg1,
mark.bg1,
.mark.bg1,
code.bg1 {
  color: var(--bg1);
}

span.black,
p.black,
b.black,
i.black,
u.black,
.text.black,
mark.black,
.mark.black,
code.black {
  color: var(--black);
}

span.fg,
p.fg,
b.fg,
i.fg,
u.fg,
.text.fg,
mark.fg,
.mark.fg,
code.fg {
  color: var(--fg);
}

span.white,
p.white,
b.white,
i.white,
u.white,
.text.white,
mark.white,
.mark.white,
code.white {
  color: var(--white);
}

span.primary,
p.primary,
b.primary,
i.primary,
u.primary,
.text.primary,
mark.primary,
.mark.primary,
code.primary {
  color: var(--primary);
}

span.primaryAlt,
p.primaryAlt,
b.primaryAlt,
i.primaryAlt,
u.primaryAlt,
.text.primaryAlt,
mark.primaryAlt,
.mark.primaryAlt,
code.primaryAlt {
  color: var(--primaryAlt);
}

span.purple,
p.purple,
b.purple,
i.purple,
u.purple,
.text.purple,
mark.purple,
.mark.purple,
code.purple {
  color: var(--purple);
}

span.purpleAlt,
p.purpleAlt,
b.purpleAlt,
i.purpleAlt,
u.purpleAlt,
.text.purpleAlt,
mark.purpleAlt,
.mark.purpleAlt,
code.purpleAlt {
  color: var(--purpleAlt);
}

span.pink,
p.pink,
b.pink,
i.pink,
u.pink,
.text.pink,
mark.pink,
.mark.pink,
code.pink {
  color: var(--pink);
}

span.pinkAlt,
p.pinkAlt,
b.pinkAlt,
i.pinkAlt,
u.pinkAlt,
.text.pinkAlt,
mark.pinkAlt,
.mark.pinkAlt,
code.pinkAlt {
  color: var(--pinkAlt);
}

span.extra,
p.extra,
b.extra,
i.extra,
u.extra,
.text.extra,
mark.extra,
.mark.extra,
code.extra {
  color: var(--extra);
}

span.extraAlt,
p.extraAlt,
b.extraAlt,
i.extraAlt,
u.extraAlt,
.text.extraAlt,
mark.extraAlt,
.mark.extraAlt,
code.extraAlt {
  color: var(--extraAlt);
}

mark.markRed,
.mark.markRed {
  background-color: var(--red);
}

mark.markRedAlt,
.mark.markRedAlt {
  background-color: var(--redAlt);
}

mark.markOrange,
.mark.markOrange {
  background-color: var(--orange);
}

mark.markOrangeAlt,
.mark.markOrangeAlt {
  background-color: var(--orangeAlt);
}

mark.markYellow,
.mark.markYellow {
  background-color: var(--yellow);
}

mark.markYellowAlt,
.mark.markYellowAlt {
  background-color: var(--yellowAlt);
}

mark.markGreen,
.mark.markGreen {
  background-color: var(--green);
}

mark.markGreenAlt,
.mark.markGreenAlt {
  background-color: var(--greenAlt);
}

mark.markBlue,
.mark.markBlue {
  background-color: var(--blue);
}

mark.markBlueAlt,
.mark.markBlueAlt {
  background-color: var(--blueAlt);
}

mark.markBg3,
.mark.markBg3 {
  background-color: var(--bg3);
}

mark.markBg2,
.mark.markBg2 {
  background-color: var(--bg2);
}

mark.markBg1,
.mark.markBg1 {
  background-color: var(--bg1);
}

mark.markBlack,
.mark.markBlack {
  background-color: var(--black);
}

mark.markFg,
.mark.markFg {
  background-color: var(--fg);
}

mark.markWhite,
.mark.markWhite {
  background-color: var(--white);
}

mark.markPrimary,
.mark.markPrimary {
  background-color: var(--primary);
}

mark.markPrimaryAlt,
.mark.markPrimaryAlt {
  background-color: var(--primaryAlt);
}

mark.markPurple,
.mark.markPurple {
  background-color: var(--purple);
}

mark.markPurpleAlt,
.mark.markPurpleAlt {
  background-color: var(--purpleAlt);
}

mark.markPink,
.mark.markPink {
  background-color: var(--pink);
}

mark.markPinkAlt,
.mark.markPinkAlt {
  background-color: var(--pinkAlt);
}

mark.markExtra,
.mark.markExtra {
  background-color: var(--extra);
}

mark.markExtraAlt,
.mark.markExtraAlt {
  background-color: var(--extraAlt);
}

.box.red {
  color: var(--red);
  border-color: var(--red);
}

.box.green {
  color: var(--green);
  border-color: var(--green);
}

pre,
.pre {
  white-space: pre;
}

button.red,
.button.red {
  background-color: var(--red);
  border-color: var(--red);
}

button.green,
.button.green {
  background-color: var(--green);
  border-color: var(--green);
}

button.extra,
.button.extra {
  background-color: var(--extra);
  border-color: var(--extra);
  color: var(--bgExtra);
}

button.alt.red,
.button.alt.red {
  background-color: var(--bg1);
  border-color: var(--red);
  color: var(--red);
}

button.alt.green,
.button.alt.green {
  background-color: var(--bg1);
  border-color: var(--green);
  color: var(--green);
}

button.alt.extra,
.button.alt.extra {
  background-color: var(--bgExtra);
  border-color: var(--extra);
  color: var(--extra);
}

button:hover.red,
button:focus-visible.red,
.button:hover.red,
.button:focus-visible.red {
  background-color: var(--redAlt);
  color: var(--bg1);
}

button:hover.green,
button:focus-visible.green,
.button:hover.green,
.button:focus-visible.green {
  background-color: var(--greenAlt);
  color: var(--bg1);
}

button:hover.extra,
button:focus-visible.extra,
.button:hover.extra,
.button:focus-visible.extra {
  background-color: var(--extraAlt);
  color: var(--bgExtra);
}

button:focus-visible.red,
.button:focus-visible.red {
  outline-color: var(--red);
}

button:focus-visible.green,
.button:focus-visible.green {
  outline-color: var(--green);
}

button:focus-visible.extra,
.button:focus-visible.extra {
  outline-color: var(--extra);
}

input[type=text].red,
input[type=password].red,
textarea.red {
  border-color: var(--red);
}

input[type=text].green,
input[type=password].green,
textarea.green {
  border-color: var(--green);
}

input[type=text].extra,
input[type=password].extra,
textarea.extra {
  background-color: var(--bgExtra);
  border-color: var(--extra);
}

input[type=text].red:hover,
input[type=text].red:focus-visible,
input[type=password].red:hover,
input[type=password].red:focus-visible,
textarea.red:hover,
textarea.red:focus-visible {
  border-color: var(--redAlt);
}

input[type=text].green:hover,
input[type=text].green:focus-visible,
input[type=password].green:hover,
input[type=password].green:focus-visible,
textarea.green:hover,
textarea.green:focus-visible {
  border-color: var(--greenAlt);
}

input[type=text].extra:hover,
input[type=text].extra:focus-visible,
input[type=password].extra:hover,
input[type=password].extra:focus-visible,
textarea.extra:hover,
textarea.extra:focus-visible {
  border-color: var(--extraAlt);
}

input[type=text].red:focus-visible,
input[type=password].red:focus-visible,
textarea.red:focus-visible {
  outline-color: var(--red);
}

input[type=text].green:focus-visible,
input[type=password].green:focus-visible,
textarea.green:focus-visible {
  outline-color: var(--green);
}

input[type=text].extra:focus-visible,
input[type=password].extra:focus-visible,
textarea.extra:focus-visible {
  outline-color: var(--extra);
}

textarea.vertical {
  resize: vertical;
  white-space: pre;
}

textarea.horizontal {
  resize: horizontal;
  white-space: pre;
}

.hide {
  display: none;
}

.fullscreen {
  position: fixed;
  top: 0px;
  left: 0px;
  width: 100vw;
  height: 100vh;
  z-index: 200;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0px;
  background: var(--bg1);
}

.exitFullscreen {
  position: fixed;
  top: 1rem;
  left: 1rem;
  margin: 0px;
  /* hide exit button by default */
  display: none;
}

.fullscreen > button.exitFullscreen,
.fullscreen > .button.exitFullscreen {
  /* show exit button if its parent is fullscreen */
  display: inline-block;
  /* and specifically use inline block just for buttons */
}

.invisible {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: 0px;
  opacity: 0;
  overflow: hidden;
}

/* fancy stuff */
.hero > .logo::before {
  content: "";
  position: absolute;
  width: 200px;
  height: 200px;
  z-index: -100;
  background-color: var(--primary);
  opacity: 0.2;
  filter: blur(1rem);
  border-radius: 50%;
}

html.min .hero > .logo::before {
  display: none;
}

.hero > .logo > svg {
  margin-top: 0px;
}

/* temp */
.fullWidth {
  width: 100%;
}

.grid.page.extra {
  margin-top: 0px;
  margin-bottom: 0px;
  padding-bottom: 1rem;
  background-color: var(--bgExtra);
}

/* third party styling requirements */
button.g,
.button.g {
  font-family: "roboto";
  background-color: #dfdfed;
  color: #181820;
  border-color: #dfdfed;
  padding: 0.6rem 0.8rem;
  border-width: 0.4rem;
}

button.g:hover,
.button.g:hover,
button.g:focus-visible,
.button.g:focus-visible {
  color: #181820;
  background-color: #CFCFE6;
}

button.g:focus-visible,
.button.g:focus-visible {
  outline-color: #dfdfed;
}

button.g img {
  height: 1.4rem;
  width: 1.4rem;
}

button.guest,
.button.guest {
  border-width: 0.4rem;
}

button.large,
.button.large {
  padding: 0.6rem 1.2rem;
  font-size: 1.2rem;
  line-height: 1.6rem;
}

/* e */
